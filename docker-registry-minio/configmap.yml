apiVersion: v1
kind: ConfigMap
metadata:
  name: python-script
  namespace: minio
data:
  script.py: |

    from minio import Minio
    from minio.error import S3Error
    import os


    MINIO_ENDPOINT = os.environ.get('MINIO_ENDPOINT', '116.203.63.120:9000')
    MINIO_ADMIN_ACCESS_KEY = os.environ.get('MINIO_ADMIN_ACCESS_KEY', 'admin')
    MINIO_ADMIN_SECRET_KEY = os.environ.get('MINIO_ADMIN_SECRET_KEY', 'root')
    
    # Initialize the MinIO client
    minio_client = Minio(
    endpoint="YOUR_MINIO_ENDPOINT",  # e.g., "127.0.0.1:9000"
    access_key="YOUR_ACCESS_KEY",
    secret_key="YOUR_SECRET_KEY",
    secure=False  # Set to True if using HTTPS
    )

    def is_minio_available():
      try:
        minio_client.list_buckets()
        return True
      except S3Error:
        return False
        
    while not is_minio_available():
      print("Waiting for MinIO to become available...")
      time.sleep(5)
    
    # Create the bucket
    bucket_name = "docker-bucket"
    try:
      if not minio_client.bucket_exists(bucket_name):
        minio_client.make_bucket(bucket_name)
        print(f"Bucket '{bucket_name}' created successfully!")
      else:
        print(f"Bucket '{bucket_name}' already exists.")
    except S3Error as err:
      print(f"Error: {err}")
